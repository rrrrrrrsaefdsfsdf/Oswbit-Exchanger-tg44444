import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.models import Database
from keyboards.inline import Keyboards
from keyboards.reply import ReplyKeyboards
from config import config

logger = logging.getLogger(__name__)
router = Router()

class OperatorStates(StatesGroup):
    waiting_for_note = State()

db = Database(config.DATABASE_URL)

OPERATORS = [
    config.ADMIN_USER_ID
]

def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_USER_ID

def is_operator(user_id: int) -> bool:
    return user_id in OPERATORS

def is_operator_chat(chat_id: int) -> bool:
    return chat_id == config.OPERATOR_CHAT_ID

def can_handle_orders(user_id: int, chat_id: int) -> bool:
    return (is_operator(user_id) or is_admin(user_id)) and is_operator_chat(chat_id)



async def notify_operators_new_order(bot, order: dict):
    display_id = order.get('personal_id', order.get('id', 'N/A'))
    chat_id = config.OPERATOR_CHAT_ID
    logger.info(f"notify_operators_new_order: –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{display_id} –≤ —á–∞—Ç {chat_id}")
    try:
        text = (
            f"üì• <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç ID: {order.get('user_id', 'N/A')}\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {order.get('total_amount', 0):,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –æ—Ç–ø—Ä–∞–≤–∫–µ: {order.get('amount_btc', 0):.8f} BTC\n"
            f"üìç –ê–¥—Ä–µ—Å: <code>{order.get('btc_address', 'N/A')}</code>\n\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n"
            f"üì± –¢–∏–ø: {order.get('payment_type', 'N/A')}\n\n"
            f"‚ö° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏</b>"
        )
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–∞", callback_data=f"op_mark_paid_{order.get('id')}"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞", callback_data=f"op_problem_{order.get('id')}")
        )
        builder.row(
            InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=f"op_note_{order.get('id')}"),
            InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏", callback_data=f"op_details_{order.get('id')}")
        )
        await bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        logger.info(f"notify_operators_new_order: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{display_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"notify_operators_new_order: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{display_id}: {e}", exc_info=True)



async def notify_operators_paid_order(bot, order: dict, received_sum: float = None):
    try:
        display_id = order.get('personal_id', order['id'])
        if not received_sum:
            received_sum = order.get('total_amount', 0)
        text = (
            f"üí∞ <b>–ó–ê–Ø–í–ö–ê –û–ü–õ–ê–ß–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç ID: {order.get('user_id', 'N/A')}\n"
            f"üíµ –ü–æ–ª—É—á–µ–Ω–æ: {received_sum:,.0f} ‚ÇΩ\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –æ—Ç–ø—Ä–∞–≤–∫–µ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ê–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n"
            f"üì± –¢–∏–ø: {order.get('payment_type', 'N/A')}\n\n"
            f"üéØ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Bitcoin!</b>"
        )
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª Bitcoin",
                callback_data=f"op_sent_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞",
                callback_data=f"op_problem_{order['id']}"
            ),
            InlineKeyboardButton(
                text="üìù –ó–∞–º–µ—Ç–∫–∞",
                callback_data=f"op_note_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏",
                callback_data=f"op_details_{order['id']}"
            )
        )
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ: {e}")

async def notify_operators_error_order(bot, order: dict, error_message: str):
    try:
        display_id = order.get('personal_id', order['id'])
        text = (
            f"‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –í –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç ID: {order.get('user_id', 'N/A')}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n\n"
            f"üîß <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!</b>"
        )
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üîß –û–±—Ä–∞–±–æ—Ç–∞—Ç—å",
                callback_data=f"op_handle_{order['id']}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"op_cancel_{order['id']}"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üìù –ó–∞–º–µ—Ç–∫–∞",
                callback_data=f"op_note_{order['id']}"
            )
        )
        await bot.send_message(
            config.OPERATOR_CHAT_ID,
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–æ—á–Ω–æ–π –∑–∞—è–≤–∫–µ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–æ—á–Ω–æ–π –∑–∞—è–≤–∫–µ: {e}")

async def notify_client_payment_received(bot, order: dict):
    try:
        display_id = order.get('personal_id', order['id'])
        text = (
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {order['amount_btc']:.8f} BTC\n\n"
            f"üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É...</b>\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n\n"
            f"üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
        )
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç—É {order['user_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –∑–∞—è–≤–∫–µ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")

async def notify_client_order_cancelled(bot, order: dict):
    try:
        display_id = order.get('personal_id', order['id'])
        text = (
            f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞."
        )
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç—É {order['user_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")

async def notify_client_order_completed(bot, order: dict):
    try:
        display_id = order.get('personal_id', order['id'])
        text = (
            f"üéâ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"‚Çø –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ù–∞ –∞–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚úÖ <b>Bitcoin —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {config.EXCHANGE_NAME}!"
        )
        await bot.send_message(
            order['user_id'],
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç—É {order['user_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")


@router.callback_query(F.data.startswith("op_sent_"))
async def operator_sent_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    try:
        await db.update_order(order_id, status='completed')
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.warning(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É #{order_id} –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é")
            return
        display_id = order.get('personal_id', order_id)
        text_client = (
            f"üéâ <b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"‚Çø –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {order['amount_btc']:.8f} BTC\n"
            f"üìç –ù–∞ –∞–¥—Ä–µ—Å: <code>{order['btc_address']}</code>\n\n"
            f"‚úÖ <b>Bitcoin —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {config.EXCHANGE_NAME}!"
        )
        await callback.bot.send_message(
            order['user_id'],
            text_client,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–ê–Ø–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üíé Bitcoin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!"
        )
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handler'e –æ—Ç–º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(F.data.startswith("op_mark_paid_"))
async def operator_mark_paid_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    try:
        await db.update_order(order_id, status='paid_by_client')
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.warning(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–º–µ—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É #{order_id} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–∞")
            return
        await notify_operators_paid_order(callback.bot, order)
        await notify_client_payment_received(callback.bot, order)
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–ê–Ø–í–ö–ê –ü–û–ú–ï–ß–ï–ù–ê –ö–ê–ö –û–ü–õ–ê–ß–ï–ù–ù–ê–Ø</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{order.get('personal_id', order_id)}\n"
            f"üë§ –ü–æ–º–µ—Ç–∏–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏")

@router.callback_query(F.data.startswith("op_problem_"))
async def operator_problem_handler(callback: CallbackQuery):
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –±–µ–∑ –ø—Ä–∞–≤")
        return
    order_id = int(callback.data.split("_")[-1])
    try:
        await db.update_order(order_id, status='problem')
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        admin_text = (
            f"‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ù–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        await callback.bot.send_message(config.ADMIN_CHAT_ID, admin_text, parse_mode="HTML")
        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ß–ï–ù–ê –ö–ê–ö –ü–†–û–ë–õ–ï–ú–ù–ê–Ø</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω",
            parse_mode="HTML"
        )
        await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ—á–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("op_note_"))
async def operator_note_handler(callback: CallbackQuery, state: FSMContext):
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –±–µ–∑ –ø—Ä–∞–≤")
        return
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(
        note_order_id=order_id,
        note_message_id=callback.message.message_id,
        note_user_id=callback.from_user.id
    )
    await callback.bot.send_message(
        callback.message.chat.id,
        f"üìù <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ #{order_id}</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        parse_mode="HTML"
    )
    await state.set_state(OperatorStates.waiting_for_note)
    await callback.answer()
    logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞—è–≤–∫–µ #{order_id}")

@router.callback_query(F.data.startswith("op_details_"))
async def operator_details_handler(callback: CallbackQuery):
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –±–µ–∑ –ø—Ä–∞–≤")
        return
    order_id = int(callback.data.split("_")[-1])
    try:
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏ #{order_id} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
            return
        display_id = order.get('personal_id', order_id)
        text = (
            f"üìã <b>–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò #{display_id}</b>\n\n"
            f"üÜî ID: {order['id']}\n"
            f"üîó OnlyPays ID: {order.get('onlypays_id', 'N/A')}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n"
            f"üí∞ –°—É–º–º–∞: {order['total_amount']:,.0f} ‚ÇΩ\n"
            f"‚Çø Bitcoin: {order['amount_btc']:.8f} BTC\n"
            f"üí± –ö—É—Ä—Å: {order.get('rate', 0):,.0f} ‚ÇΩ\n"
            f"üì± –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {order.get('payment_type', 'N/A')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order.get('status', 'N/A')}\n"
            f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {order.get('created_at', 'N/A')}\n\n"
            f"‚Çø <b>BTC –∞–¥—Ä–µ—Å:</b>\n<code>{order.get('btc_address', 'N/A')}</code>\n\n"
            f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n{order.get('requisites', 'N/A')}"
        )
        await callback.answer()
        await callback.bot.send_message(
            callback.message.chat.id,
            text,
            parse_mode="HTML"
        )
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")

@router.callback_query(F.data.startswith("op_cancel_"))
async def operator_cancel_handler(callback: CallbackQuery):
    if not can_handle_orders(callback.from_user.id, callback.message.chat.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –±–µ–∑ –ø—Ä–∞–≤")
        return
    order_id = int(callback.data.split("_")[-1])
    try:
        await db.update_order(order_id, status='cancelled')
        order = await db.get_order(order_id)
        if order:
            await notify_client_order_cancelled(callback.bot, order)
        display_id = order.get('personal_id', order_id) if order else order_id
        await callback.message.edit_text(
            f"‚ùå <b>–ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û—Ç–º–µ–Ω–∏–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì® –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω",
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        logger.info(f"–ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏")

@router.message(OperatorStates.waiting_for_note)
async def note_input_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('note_order_id')
    note_user_id = data.get('note_user_id')
    if note_user_id != message.from_user.id or not can_handle_orders(message.from_user.id, message.chat.id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–ª–∏ –≤ —á—É–∂–æ–º —á–∞—Ç–µ")
        return
    if not order_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error("–ó–∞–º–µ—Ç–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–∞–º–µ—Ç–∫–∏")
        await state.clear()
        return
    note_text = message.text
    try:
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        admin_text = (
            f"üìù <b>–ó–ê–ú–ï–¢–ö–ê –ö –ó–ê–Ø–í–ö–ï</b>\n\n"
            f"üÜî –ó–∞—è–≤–∫–∞: #{display_id}\n"
            f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @{message.from_user.username or message.from_user.first_name}\n"
            f"üìù –ó–∞–º–µ—Ç–∫–∞: {note_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await message.bot.send_message(
            config.ADMIN_CHAT_ID,
            admin_text,
            parse_mode="HTML"
        )
        try:
            await db.update_order(order_id, operator_notes=note_text)
        except Exception as exc:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ë–î –¥–ª—è –∑–∞—è–≤–∫–∏ #{display_id}: {exc}")
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –∫ –∑–∞—è–≤–∫–µ #{display_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            parse_mode="HTML"
        )
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ—Ç–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –∑–∞–º–µ—Ç–∫—É –∫ –∑–∞—è–≤–∫–µ #{display_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")
    await state.clear()





