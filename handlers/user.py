                  
import logging
import asyncio
import os
from datetime import datetime
import traceback
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Database
from keyboards.reply import ReplyKeyboards
from keyboards.inline import InlineKeyboards
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.bitcoin import BitcoinAPI
from utils.captcha import CaptchaGenerator
from config import config
from handlers.operator import (
    notify_operators_new_order,
    notify_operators_paid_order,
    notify_operators_error_order,
    notify_client_payment_received,
    notify_client_order_cancelled
)
from api.onlypays_api import OnlyPaysAPI
from api.pspware_api import PSPWareAPI
from api.greengo_api import GreengoAPI
from api.nicepay_api import NicePayAPI
from api.api_manager import PaymentAPIManager

logger = logging.getLogger(__name__)
router = Router()
logger.info("User router loaded")

onlypays_api = OnlyPaysAPI(
    api_id=os.getenv('ONLYPAYS_API_ID'),
    secret_key=os.getenv('ONLYPAYS_SECRET_KEY'),
    payment_key=os.getenv('ONLYPAYS_PAYMENT_KEY')
)
pspware_api = PSPWareAPI()
greengo_api = GreengoAPI()
nicepay_api = NicePayAPI()

                                                     
payment_api_manager = PaymentAPIManager([
    {"api": onlypays_api, "name": "OnlyPays"},
    {"api": pspware_api, "name": "PSPWare", "pay_type_mapping": {"card": "c2c", "sbp": "sbp"}},
    {"api": greengo_api, "name": "Greengo", "pay_type_mapping": {"card": "card", "sbp": "sbp"}},
    {"api": nicepay_api, "name": "NicePay", "pay_type_mapping": {"card": "sberbank_rub", "sbp": "sbp_rub"}}
])



                                                                     
class ExchangeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_btc_address = State()
    waiting_for_captcha = State()
    waiting_for_contact = State()
    waiting_for_address = State()
    waiting_for_card_details = State()
    waiting_for_note = State()

db = Database(config.DATABASE_URL)






async def show_main_menu(message_or_callback, is_callback=False):


        

    default_welcome = (
        f"<b>ü•∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.EXCHANGE_NAME}, –Ω–∏–Ω–¥–∑—è!</b>\n"
        f"\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å Bitcoin –ø–æ –ª—É—á—à–µ–º—É –∫—É—Ä—Å—É.\n\n"
        f"–ë—ã—Å—Ç—Ä–æ. –î–µ—à–µ–≤–æ. –ê–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {config.SUPPORT_MANAGER}\n"
        f"–ö–∞–Ω–∞–ª: {config.NEWS_CHANNEL}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
    )

    welcome_msg = await db.get_setting("welcome_message", default_welcome)
    if is_callback:
        await message_or_callback.bot.send_message(
            message_or_callback.message.chat.id,
            welcome_msg,
            reply_markup=ReplyKeyboards.main_menu()
        )
    else:
        await message_or_callback.answer(welcome_msg, reply_markup=ReplyKeyboards.main_menu())





@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    user = await db.get_user(message.from_user.id)
    if not user:
        captcha_enabled = await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED)
        if captcha_enabled:
            image_buffer, answer = CaptchaGenerator.generate_image_captcha()
            await db.create_captcha_session(message.from_user.id, answer.upper())
            captcha_photo = BufferedInputFile(
                image_buffer.read(),
                filename="captcha.png"
            )
            await message.answer_photo(
                photo=captcha_photo,
                caption="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
                reply_markup=ReplyKeyboards.back_to_main()
            )
            await state.set_state(ExchangeStates.waiting_for_captcha)
            return
        else:
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
    await show_main_menu(message)

@router.message(ExchangeStates.waiting_for_captcha)
async def captcha_handler(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ /start")
        return
    session = await db.get_captcha_session(message.from_user.id)
    if not session:
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    user_answer = message.text.upper().strip()
    correct_answer = session['answer'].upper().strip()
    if user_answer == correct_answer:
        await db.delete_captcha_session(message.from_user.id)
        await db.add_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        data = await state.get_data()
        referral_user_id = data.get('referral_user_id')
        if referral_user_id and referral_user_id != message.from_user.id:
            await db.update_user(message.from_user.id, referred_by=referral_user_id)
            await db.update_referral_count(referral_user_id)
            try:
                await message.bot.send_message(
                    referral_user_id,
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                    f"üë§ {message.from_user.first_name}\n"
                    f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                )
            except:
                pass
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await show_main_menu(message)
        await state.clear()
    else:
        attempts = session['attempts'] + 1
        if attempts >= 3:
            await db.delete_captcha_session(message.from_user.id)
            await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
            await state.clear()
        else:
            await db.execute_query(
                'UPDATE captcha_sessions SET attempts = ? WHERE user_id = ?',
                (attempts, message.from_user.id)
            )
            try:
                image_buffer, answer = CaptchaGenerator.generate_simple_image_captcha()
                await db.execute_query(
                    'UPDATE captcha_sessions SET answer = ? WHERE user_id = ?',
                    (answer.upper(), message.from_user.id)
                )
                captcha_photo = BufferedInputFile(
                    image_buffer.read(),
                    filename="captcha.png"
                )
                await message.answer_photo(
                    photo=captcha_photo,
                    caption=f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏:"
                )
            except:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {3-attempts}")

@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def buy_handler(message: Message, state: FSMContext):
    await state.clear()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    await message.answer(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )


@router.callback_query(F.data.startswith("buy_"))
async def buy_crypto_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "buy_main_menu":
        await show_main_menu(callback, is_callback=True)
        return

    crypto = callback.data.replace("buy_", "").upper()
    if crypto == "BTC":
        await state.update_data(
            operation="buy",
            crypto=crypto,
            direction="rub_to_crypto"
        )
        btc_rate = await BitcoinAPI.get_btc_rate()
        text = (
            f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞ Bitcoin\n\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
            f"\nüí±–û–±–º–µ–Ω: –æ—Ç {config.MIN_AMOUNT:,.0f} RUB –¥–æ {config.MAX_AMOUNT:,.0f} RUB</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ BTC (–≤ BTC –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.001):"
        )
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), "rub_to_crypto"),
            parse_mode="HTML"
        )
        await state.set_state(ExchangeStates.waiting_for_amount)







@router.callback_query(F.data.startswith("amount_"))
async def amount_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        operation = data.get("operation", "buy")
        if operation == "buy":
            await buy_handler(callback.message, state)
        return
    if "main_menu" in callback.data:
        await show_main_menu(callback, is_callback=True)
        return
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-1])
    amount = float(parts[-1])
    await process_amount_and_show_calculation(callback, state, crypto, direction, amount)

@router.callback_query(F.data == "back_to_buy_selection")
async def back_to_buy_selection(callback: CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å."
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboards.buy_crypto_selection()
    )


@router.message(ExchangeStates.waiting_for_amount)
async def manual_amount_input(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return

    data = await state.get_data()
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        crypto = data.get("crypto")
        direction = data.get("direction")
        if not crypto or not direction:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        if amount < 1:
                                                        
            await process_amount_and_show_calculation_for_message(
                message, state, crypto, direction, amount, is_crypto=True
            )
        elif 1 <= amount <= 2000:
            await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ 2.000 RUB")
            return
        else:
                                                           
            if not (config.MIN_AMOUNT <= amount <= config.MAX_AMOUNT):
                await message.answer(
                    f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.MIN_AMOUNT:,} ‚ÇΩ –¥–æ {config.MAX_AMOUNT:,} ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."
                )
                return
            await process_amount_and_show_calculation_for_message(
                message, state, crypto, direction, amount
            )

    except (ValueError, TypeError) as e:
        logger.error(f"Error parsing amount: {message.text}, error: {e}")
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000 –∏–ª–∏ 5000.50)")






async def process_amount_and_show_calculation(callback: CallbackQuery, state: FSMContext,
                                            crypto: str, direction: str, amount: float):
    btc_rate = await BitcoinAPI.get_btc_rate()
    if direction == "rub_to_crypto":
        rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    COMMISSION_PERCENT = await db.get_commission_percentage()
    total_amount = rub_amount / (1 - COMMISSION_PERCENT / 100)
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        total_amount=total_amount,
        payment_type='card'
    )
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å:"
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_address)

async def process_amount_and_show_calculation_for_message(message: Message, state: FSMContext,
                                                        crypto: str, direction: str, amount: float, is_crypto: bool = False):
    btc_rate = await BitcoinAPI.get_btc_rate()
    if direction == "rub_to_crypto":
        if is_crypto:
            rub_amount = await BitcoinAPI.get_btc_to_rub(amount)
        else:
            rub_amount = amount
        crypto_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    else:
        crypto_amount = amount
        rub_amount = crypto_amount * btc_rate
    COMMISSION_PERCENT = await db.get_commission_percentage()
    total_amount = rub_amount / (1 - COMMISSION_PERCENT / 100)
    await state.update_data(
        crypto=crypto,
        direction=direction,
        rub_amount=rub_amount,
        crypto_amount=crypto_amount,
        rate=btc_rate,
        total_amount=total_amount,
        payment_type='card'
    )
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if direction == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    text = (
        f"üìä <b>{operation_text} Bitcoin</b>\n\n"
        f"üí± –ö—É—Ä—Å: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {crypto_amount:.8f} BTC\n\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å:"
    )
    await message.answer(text, parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_address)






@router.callback_query(F.data.startswith("payment_"))
async def payment_method_selected(callback: CallbackQuery, state: FSMContext):
    if "back" in callback.data:
        data = await state.get_data()
        crypto = data.get("crypto")
        direction = data.get("direction")
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ {'—Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö' if direction == 'rub_to_crypto' else '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC'}:",
            reply_markup=InlineKeyboards.amount_input_keyboard(crypto.lower(), direction)
        )
        return
    if "main_menu" in callback.data:
        await show_main_menu(callback, is_callback=True)
        return
    parts = callback.data.split("_")
    crypto = parts[1].upper()
    direction = "_".join(parts[2:-2])
    amount = parts[-2]
    payment_type = parts[-1]
    await state.update_data(payment_type=payment_type)
    if direction == "rub_to_crypto":
        text = (
            f"‚Çø <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Bitcoin –∞–¥—Ä–µ—Å</b>\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å."
        )
    else:
        text = (
            f"üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è</b>\n\n"
            f"{'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã' if payment_type == 'card' else '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü'}:"
        )
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_address)









@router.message(ExchangeStates.waiting_for_btc_address)
async def btc_address_handler(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    btc_address = message.text.strip()
    if not BitcoinAPI.validate_btc_address(btc_address):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    data = await state.get_data()
    btc_rate = await BitcoinAPI.get_btc_rate()
    if not btc_rate:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    rub_amount = data['rub_amount']
    btc_amount = BitcoinAPI.calculate_btc_amount(rub_amount, btc_rate)
    COMMISSION_PERCENT = await db.get_commission_percentage()
    total_amount = rub_amount / (1 - COMMISSION_PERCENT / 100)
    text = (
        f"üìä <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b>\n\n"
        f"üí± –ö—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É: {rub_amount:,.0f} ‚ÇΩ\n"
        f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ Bitcoin: {btc_amount:.8f} BTC\n\n"
        f"üí∏ <b>–ö –æ–ø–ª–∞—Ç–µ: {total_amount:,.0f} ‚ÇΩ</b>\n\n"
        f"‚Çø Bitcoin –∞–¥—Ä–µ—Å:\n<code>{btc_address}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    await state.update_data(
        btc_address=btc_address,
        rub_amount=rub_amount,
        btc_amount=btc_amount,
        btc_rate=btc_rate,
        total_amount=total_amount
    )
    await message.answer(text, reply_markup=ReplyKeyboards.payment_methods(), parse_mode="HTML")




@router.message(ExchangeStates.waiting_for_address)
async def address_input_handler(message: Message, state: FSMContext):
    address = message.text.strip()
    data = await state.get_data()
    direction = data.get("direction")
    crypto = data.get("crypto")
    if direction == "rub_to_crypto":
        if not BitcoinAPI.validate_btc_address(address):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    else:
        if len(address) < 10:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    await state.update_data(address=address)
    order_id = await create_exchange_order(message.from_user.id, state)
    await show_order_confirmation(message, state, order_id)






                                                                          
                                   
                                       
                          
                                        
                                           
                                      
                            
                                            
                                           
       
                     


async def create_exchange_order(user_id: int, state: FSMContext) -> int:
    
    data = await state.get_data()
    
    order_id = await db.create_order(
        user_id=user_id,
        amount_rub=data["rub_amount"],
        amount_btc=data["crypto_amount"],
        btc_address=data["address"],
        rate=data["rate"],
        total_amount=data["total_amount"],
        payment_type=data["payment_type"]
    )
    
                                               
    await db.add_turnover_record(
        order_id=order_id,
        user_id=user_id,
        amount=data["total_amount"],
        status="created"
    )
    
    return order_id







async def show_order_confirmation(message: Message, state: FSMContext, order_id: int):
    data = await state.get_data()
    order = await db.get_order(order_id)
    display_id = order.get('personal_id', order_id) if order else order_id
    operation_text = "–ü–æ–∫—É–ø–∫–∞" if data["direction"] == "rub_to_crypto" else "–ü—Ä–æ–¥–∞–∂–∞"
    text = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üìã <b>{operation_text} Bitcoin</b>\n"
        f"üí∞ –°—É–º–º–∞: {data['rub_amount']:,.0f} ‚ÇΩ\n"
        f"‚Çø –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['crypto_amount']:.8f} BTC\n"
        f"üí∏ –ö {'–æ–ø–ª–∞—Ç–µ' if data['direction'] == 'rub_to_crypto' else '–ø–æ–ª—É—á–µ–Ω–∏—é'}: {data['total_amount']:,.0f} ‚ÇΩ\n\n"
        f"üìù –ê–¥—Ä–µ—Å/–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n<code>{data['address']}</code>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    
    await message.answer(
        text,
        reply_markup=InlineKeyboards.order_confirmation(order_id),
        parse_mode="HTML"
    )
                         










async def request_requisites_with_retries(order_id: int, user_id: int, payment_type: str, bot, max_attempts=3, delay_sec=60):
    order = await db.get_order(order_id)
    if not order:
        logger.error(f"Order not found: {order_id}")
        return False
    
    is_sell_order = not order.get('btc_address')
    total_amount = int(await db.get_order_total_amount(order_id))
    
    for attempt in range(1, max_attempts + 1):
        try:
                                                    
            for api_config in payment_api_manager.apis:
                api_name = api_config['name']
                if api_name == 'Greengo':
                    min_amount = api_config.get('min_amount', 500)
                    if total_amount < min_amount:
                        logger.warning(f"Order {order_id} amount {total_amount} is below Greengo minimum {min_amount}")
                        await bot.send_message(
                            user_id,
                            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {min_amount} ‚ÇΩ. –í–∞—à–∞ —Å—É–º–º–∞: {total_amount} ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–µ–ª–∏—á—å—Ç–µ —Å—É–º–º—É.",
                            reply_markup=ReplyKeyboards.main_menu()
                        )
                        await db.update_order(order_id, status='error_requisites')
                        return False
            
                                                                  
            wallet = order.get('btc_address') if not is_sell_order else None
            
            api_response = await payment_api_manager.create_order(
                amount=total_amount,
                payment_type=payment_type,
                personal_id=str(order_id),
                is_sell_order=is_sell_order,
                wallet=wallet                                             
            )
            
            if api_response.get('success'):
                payment_data = api_response['data']
                api_name = api_response.get('api_name')
                
                                                           
                if api_name == 'NicePay':
                    logger.debug(f"Payment data for NicePay: {payment_data}")
                    requisites_text = (
                        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {payment_data['payment_url']}\n"
                        f"üí≥ –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {'–ö–∞—Ä—Ç–∞' if payment_type == 'card' else '–°–ë–ü'}\n"
                        f"üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_data['id']}"
                    )
                    
                else:
                    requisites_text = (
                        f"{'üí≥ –ö–∞—Ä—Ç–∞' if payment_type == 'card' else 'üì± –¢–µ–ª–µ—Ñ–æ–Ω'}: {payment_data['requisite']}\n"
                        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
                        f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
                    )
                
                update_data = {
                    'requisites': requisites_text,
                    'status': 'waiting',
                    'personal_id': payment_data['id']
                }
                if api_name == 'OnlyPays':
                    update_data['onlypays_id'] = payment_data['id']
                elif api_name == 'PSPWare':
                    update_data['pspware_id'] = payment_data['id']
                elif api_name == 'Greengo':
                    update_data['greengo_id'] = payment_data['id']
                elif api_name == 'NicePay':
                    update_data['nicepay_id'] = payment_data['id']
                
                await db.update_order(order_id, **update_data)
                await bot.send_message(
                    user_id,
                    f"üí≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{payment_data['id']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                    f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_amount:,.0f} ‚ÇΩ</b>\n\n"
                    f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{requisites_text}\n\n"
                    f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
                    f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
                    f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    f"‚Ä¢ Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                    f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç",
                    parse_mode="HTML",
                    reply_markup=ReplyKeyboards.order_menu(is_nicepay=(api_name == 'NicePay'))
                )
                return True
            else:
                logger.warning(f"{api_response.get('api_name')} order creation failed on attempt {attempt} for order {order_id}: {api_response.get('error')}")
                if api_response.get('api_name') == 'Greengo' and "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—á–µ—Ç–æ–≤" in str(api_response.get('error', '')):
                    await bot.send_message(
                        user_id,
                        "‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Greengo. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                        reply_markup=ReplyKeyboards.main_menu()
                    )
                    await db.update_order(order_id, status='error_requisites')
                    return False
                elif api_response.get('api_name') == 'NicePay' and 'getaddrinfo failed' in str(api_response.get('error', '')):
                    await bot.send_message(
                        user_id,
                        "‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ NicePay. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=ReplyKeyboards.main_menu()
                    )
                    await db.update_order(order_id, status='error_requisites')
                    return False
        
        except Exception as e:
            logger.error(f"Attempt {attempt} failed for order {order_id}: {e}")
        
        if attempt < max_attempts:
            await asyncio.sleep(delay_sec)

    await db.update_order(order_id, status='error_requisites')
    error_msg = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ."
    if is_sell_order:
        error_msg = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–∞–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await bot.send_message(
        user_id,
        error_msg,
        reply_markup=ReplyKeyboards.main_menu()
    )
    return False







                                                                                
                                                                                   
                                            
                                                                             
                                                  
                                          
    
                                                                
                                                                   
                
    
                             






@router.callback_query(F.data.startswith(("confirm_order_", "cancel_order_")))
async def order_confirmation_handler(callback: CallbackQuery, state: FSMContext):
    action = "confirm" if callback.data.startswith("confirm") else "cancel"
    order_id = int(callback.data.split("_")[-1])
    order = await db.get_order(order_id)
    if not order or order['user_id'] != callback.from_user.id:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    if action == "confirm":
        if not order:
            await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        user_id = order['user_id']
        payment_type = order.get('payment_type')
        if order['total_amount'] and payment_type:
            await callback.message.edit_text(
                "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 4-—Ö –º–∏–Ω—É—Ç..."
            )
            asyncio.create_task(
                request_requisites_with_retries(order_id, user_id, payment_type, callback.bot)
            )
            await state.clear()  
            return
        else:
            text = (
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.get('personal_id', order_id)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç."
            )
    else:
        await db.update_order(order_id, status='cancelled')
        order = await db.get_order(order_id)
        display_id = order.get('personal_id', order_id) if order else order_id
        text = f"‚ùå –ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
    await callback.message.edit_text(text, parse_mode="HTML")
    await asyncio.sleep(3)
    await callback.bot.send_message(
        callback.message.chat.id,
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboards.main_menu()
    )
    await state.clear() 







                                                                              
@router.message(F.text.in_(["üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "üì± –°–ë–ü"]))
async def payment_method_handler(message: Message, state: FSMContext):
    logger.info(f"payment_method_handler –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")

    payment_type = "card" if "–∫–∞—Ä—Ç–∞" in message.text else "sbp"
    data = await state.get_data()

                                                 
    rub_amount = data.get('rub_amount')
    btc_amount = data.get('btc_amount')
    btc_rate = data.get('btc_rate')

    logger.debug(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: rub_amount={rub_amount}, btc_amount={btc_amount}, btc_rate={btc_rate}")

    if rub_amount is None or btc_amount is None or btc_rate is None:
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –ø—Ä–µ–∫—Ä–∞—â–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        await state.clear()
        return
    
    total_amount = rub_amount / (1 - (await db.get_commission_percentage()) / 100)

    logger.info(f"–°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑: user_id={message.from_user.id}, rub_amount={rub_amount}, btc_amount={btc_amount}, "
                f"btc_address={data.get('btc_address', data.get('address', ''))}, rate={btc_rate}, total_amount={total_amount}, payment_type={payment_type}")
    
    order_id = await db.create_order(
        user_id=message.from_user.id,
        amount_rub=rub_amount,
        amount_btc=btc_amount,
        btc_address=data.get('btc_address', data.get('address', '')),
        rate=btc_rate,
        total_amount=total_amount,
        payment_type=payment_type
    )
    logger.info(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID {order_id}")

                                    
    order = await db.get_order(order_id)
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î: {order}")

                                                      
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ {order_id}")
        await notify_operators_new_order(message.bot, order)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ #{order.get('personal_id', order_id)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")

                                       
    is_sell_order = not order.get('btc_address')
    logger.info(f"–°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂–Ω—ã–π –∑–∞–∫–∞–∑ –≤ API. is_sell_order={is_sell_order}, order_id={order_id}")

    try:
        api_response = await payment_api_manager.create_order(
            amount=int(total_amount),
            payment_type=payment_type,
            personal_id=str(order_id),
            is_sell_order=is_sell_order
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ø–ª–∞—Ç—ë–∂–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    if api_response.get('success'):
        payment_data = api_response['data']
        api_name = api_response.get('api_name')
        
                                                    
                                            
        if api_name == 'NicePay':
            requisites_text = (
                f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {payment_data['payment_url']}\n"
                f"üí≥ –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: {'–ö–∞—Ä—Ç–∞' if payment_type == 'card' else '–°–ë–ü'}\n"
                f"üìã ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_data['id']}"
            )
            reply_markup = ReplyKeyboards.main_menu()                                   
        else:
            requisites_text = (
                f"{'üí≥ –ö–∞—Ä—Ç–∞' if payment_type == 'card' else 'üì± –¢–µ–ª–µ—Ñ–æ–Ω'}: {payment_data['requisite']}\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {payment_data['owner']}\n"
                f"üèõ –ë–∞–Ω–∫: {payment_data['bank']}"
            )
            reply_markup = ReplyKeyboards.order_menu(is_nicepay=False)                              
        
                                                     
        update_data = {
            'requisites': requisites_text,
            'personal_id': payment_data['id'],
            'status': 'waiting'
        }
        if api_name == 'OnlyPays':
            update_data['onlypays_id'] = payment_data['id']
        elif api_name == 'PSPWare':
            update_data['pspware_id'] = payment_data['id']
        elif api_name == 'Greengo':
            update_data['greengo_id'] = payment_data['id']
        elif api_name == 'NicePay':
            update_data['nicepay_id'] = payment_data['id']

        try:
            await db.update_order(order_id, **update_data)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ ID {order_id} —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ë–î: {e}")

        text = (
            f"üí≥ <b>–ó–∞—è–≤–∫–∞ #{payment_data['id']} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É: {rub_amount:,.0f} ‚ÇΩ\n"
            f"‚Çø –ü–æ–ª—É—á–∏—Ç–µ: {btc_amount:.8f} BTC\n"
            f"üí∏ –ö –æ–ø–ª–∞—Ç–µ: <b>{total_amount:,.0f} ‚ÇΩ</b>\n\n"
            f"üìã <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
            f"{requisites_text}\n\n"
            f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            f"‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            f"‚Ä¢ Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"‚è∞ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç"
        )

        try:
            await message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{payment_data['id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")
    else:
        error_msg = api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        logger.error(f"–ü–ª–∞—Ç—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {error_msg}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=ReplyKeyboards.main_menu()
        )

    await state.clear()








@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def check_status_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 1)
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    order = orders[0]
    display_id = order.get('personal_id', order['id'])
    
                                                      
    if order.get('nicepay_id'):
        await message.answer(
            f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{display_id}: ‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
            f"–î–ª—è –∑–∞—è–≤–æ–∫ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return
    
    if order['status'] == 'waiting' and (order.get('onlypays_id') or order.get('pspware_id') or order.get('greengo_id')):
                                           
        api_name = 'OnlyPays' if order.get('onlypays_id') else 'PSPWare' if order.get('pspware_id') else 'Greengo' if order.get('greengo_id') else None
        api_order_id = order.get('onlypays_id') or order.get('pspware_id') or order.get('greengo_id')
        
        if not api_name or not api_order_id:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å API –¥–ª—è –∑–∞—è–≤–∫–∏ #{display_id}",
                reply_markup=ReplyKeyboards.main_menu()
            )
            return
        
        api_response = await payment_api_manager.get_order_status(
            order_id=api_order_id,
            api_name=api_name
        )
        
        if api_response and api_response.get('success'):
            status_data = api_response['data']
            logger.debug(f"Status data for order {display_id}: {status_data}")                    
            if status_data.get('status') == 'finished':
                                                      
                webhook_data = {
                    'id': api_order_id,
                    'status': 'finished',
                    'personal_id': str(order['id']),
                    'received_sum': status_data.get('received_sum', order['total_amount'])
                }
                
                                                               
                if order.get('onlypays_id'):
                    await process_onlypays_webhook(webhook_data, message.bot)
                elif order.get('pspware_id'):
                    await process_pspware_webhook(webhook_data, message.bot)
                elif order.get('greengo_id'):
                    await process_greengo_webhook(webhook_data, message.bot)
                
                await message.answer(
                    f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{display_id} –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n\n"
                    f"–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n"
                    f"Bitcoin –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
            elif status_data.get('status') == 'cancelled':
                await db.update_order(order['id'], status='cancelled')
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                    f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞.",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"‚è≥ –ó–∞—è–≤–∫–∞ #{display_id} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                    f"–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...\n"
                    f"–ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç.",
                    reply_markup=ReplyKeyboards.order_menu(),
                    parse_mode="HTML"
                )
        else:
            error_message = api_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if api_response else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {error_message}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=ReplyKeyboards.main_menu()
            )
    else:
        status_text = {
            'waiting': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'paid_by_client': 'üí∞ –û–ø–ª–∞—á–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
            'problem': '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω–∞—è'
        }.get(order['status'], f"‚ùì {order['status']}")
                                                    
        cleaned_status_text = ''.join(c for c in status_text if c not in '<>')
        await message.answer(
            f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{display_id}: {cleaned_status_text}",
            reply_markup=ReplyKeyboards.main_menu()
        )






@router.message(F.text == "–û —Å–µ—Ä–≤–∏—Å–µ ‚ÑπÔ∏è")
async def about_handler(message: Message):
    btc_rate = await BitcoinAPI.get_btc_rate()
    COMMISSION_PERCENT = await db.get_commission_percentage()
    text = (
        f"üëë {config.EXCHANGE_NAME} üëë\n\n"
        f"üî∑ –ù–ê–®–ò –ü–†–ò–û–†–ò–¢–ï–¢–´ üî∑\n"
        f"üî∏ 100% –ì–ê–†–ê–ù–¢–ò–ò\n"
        f"üî∏ –ë–´–°–¢–†–´–ô –û–ë–ú–ï–ù\n"
        f"üî∏ –ù–ê–î–ï–ñ–ù–´–ô –°–ï–†–í–ò–°\n"
        f"üî∏ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–ê–Ø –†–ê–ë–û–¢–ê\n"
        f"üî∏ –ê–ù–û–ù–ò–ú–ù–´–ô –û–ë–ú–ï–ù\n\n"
        f"üî∑ –ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´ üî∑\n"
        f"‚öôÔ∏è –û–ü–ï–†–ê–¢–û–† –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ûñ {config.SUPPORT_MANAGER}\n"
        f"üì£ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ ‚ûñ {config.NEWS_CHANNEL}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å BTC: {btc_rate:,.0f} ‚ÇΩ\n"
        f"üèõ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {COMMISSION_PERCENT}%\n\n"
        f"üí∞ –õ–∏–º–∏—Ç—ã: {config.MIN_AMOUNT:,} - {config.MAX_AMOUNT:,} ‚ÇΩ"
    )
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç")
async def calculator_handler(message: Message, state: FSMContext):
    await state.clear()
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>"
    await message.answer(
        text,
        reply_markup=InlineKeyboards.currency_calculator(),
        parse_mode="HTML"
    )

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def review_handler(message: Message, state: FSMContext):
    await message.answer(
        "üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –ª—é–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
        reply_markup=ReplyKeyboards.back_to_main(),
        parse_mode="HTML"
    )
    await state.set_state(ExchangeStates.waiting_for_contact)

@router.message(F.text == "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?")
async def how_to_exchange_handler(message: Message):
    text = (
        "üìò <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω?</b>\n\n"
        "üìπ –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: \n\n"
    )
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "–î—Ä—É–∑—å—è")
async def referral_handler(message: Message):
    try:
        user = await db.get_user(message.from_user.id)
        if not user:
            await db.add_user(
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
            user = await db.get_user(message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start",
                reply_markup=ReplyKeyboards.main_menu()
            )
            return
        stats = await db.get_referral_stats(message.from_user.id)
        text = (
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</b>\n"
            f"‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 100 ‚ÇΩ\n"
            f"‚Ä¢ –û—Ç –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –¥—Ä—É–≥–∞: 2%\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['referral_count']} —á–µ–ª.\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['referral_balance']} ‚ÇΩ\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}</code>\n\n"
            f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!</b>\n"
            f"–ö–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∏ —Å–¥–µ–ª–∞—é—Ç –æ–±–º–µ–Ω, "
            f"–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!"
        )
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                url=f"https://t.me/share/url?url=https://t.me/{config.BOT_USERNAME}?start=r-{message.from_user.id}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ª—É—á—à–µ–º—É –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫—É {config.EXCHANGE_NAME}!"
            )
        )
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–∞—è", 
                callback_data="referral_main_menu"
            )
        )
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.error(f"Referral handler error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start",
            reply_markup=ReplyKeyboards.main_menu()
        )

@router.callback_query(F.data == "referral_history")
async def referral_history_handler(callback: CallbackQuery):
    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")

@router.callback_query(F.data == "referral_main_menu")
async def referral_main_menu_handler(callback: CallbackQuery):
    await show_main_menu(callback, is_callback=True)

@router.message(F.text == "‚ÇΩ ‚Üí ‚Çø –†—É–±–ª–∏ –≤ Bitcoin")
async def rub_to_btc_handler(message: Message, state: FSMContext):
    await state.update_data(exchange_type="rub")
    min_amount = await db.get_setting("min_amount", config.MIN_AMOUNT)
    max_amount = await db.get_setting("max_amount", config.MAX_AMOUNT)
    text = (
        f"üí∞ <b>–û–±–º–µ–Ω —Ä—É–±–ª–µ–π –Ω–∞ Bitcoin</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:\n\n"
        f"–ú–∏–Ω–∏–º—É–º: {min_amount:,} ‚ÇΩ\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {max_amount:,} ‚ÇΩ"
    )
    await message.answer(text, reply_markup=ReplyKeyboards.back_to_main(), parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.message(F.text == "‚Çø ‚Üí ‚ÇΩ Bitcoin –≤ —Ä—É–±–ª–∏")
async def btc_to_rub_handler(message: Message, state: FSMContext):
    text = (
        f"‚Çø <b>–û–±–º–µ–Ω Bitcoin –Ω–∞ —Ä—É–±–ª–∏</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin:"
    )
    await message.answer(text, reply_markup=ReplyKeyboards.back_to_main(), parse_mode="HTML")
    await state.set_state(ExchangeStates.waiting_for_amount)

@router.message(F.text == "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 5)
    if not orders:
        text = (
            "üìã <b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω!"
        )
    else:
        status_emoji_map = {
            'waiting': '‚è≥',
            'paid_by_client': 'üí∞',
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'problem': '‚ö†Ô∏è'
        }
        text = "üìã <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        for order in orders:
            emoji = status_emoji_map.get(order['status'], '‚ùì')
            display_id = order.get('personal_id', order['id'])
            text += (
                f"{emoji} –ó–∞—è–≤–∫–∞ #{display_id}\n"
                f"üí∞ {order['total_amount']:,.0f} ‚ÇΩ\n"
                f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"üìÖ {order['created_at'][:16]}\n\n"
            )
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
async def rates_handler(message: Message):
    try:
        btc_rate = await BitcoinAPI.get_btc_rate()
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚Çø Bitcoin: {btc_rate:,.0f} ‚ÇΩ\n\n"
            f"üí° –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
    except:
        text = (
            f"üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    await message.answer(text, reply_markup=ReplyKeyboards.main_menu(), parse_mode="HTML")

@router.message(F.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message)

@router.message(F.text == "‚ó∂Ô∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await message.answer(
        "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
        reply_markup=ReplyKeyboards.exchange_menu(),
        parse_mode="HTML"
    )

@router.message(ExchangeStates.waiting_for_contact)
async def contact_handler(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    user_id = message.from_user.id
    try:
        last_review = await db.get_last_review_time(user_id)
        current_time = message.date.replace(tzinfo=None)
        if last_review:
            time_diff = current_time - last_review
            cooldown_hours = 24
            if time_diff.total_seconds() < cooldown_hours * 3600:
                remaining = cooldown_hours * 3600 - time_diff.total_seconds()
                hours_left = int(remaining // 3600)
                minutes_left = int((remaining % 3600) // 60)
                await message.answer(
                    f"‚è∞ <b>–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏</b>\n\n"
                    f"–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞: {hours_left}—á {minutes_left}–º",
                    reply_markup=ReplyKeyboards.main_menu(),
                    parse_mode="HTML"
                )
                await state.clear()
                return
        if len(message.text) < 10:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        if len(message.text) > 1000:
            await message.answer(
                f"üìù <b>–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b>\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(message.text)}",
                parse_mode="HTML"
            )
            return
        user = await db.get_user(user_id)
        review_text = (
            f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
            f"üìÖ {current_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üí¨ <b>–¢–µ–∫—Å—Ç:</b>\n{message.text}"
        )
        review_id = await db.save_review(user_id, message.text)
        if config.ADMIN_CHAT_ID:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}")
            )
            await message.bot.send_message(
                config.ADMIN_CHAT_ID,
                review_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        await message.answer(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!</b>\n\n"
            "–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Review error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboards.main_menu()
        )
    await state.clear()







from aiogram.types import ReplyKeyboardRemove

                         
                                                  
                                                                                                
                

                                              
                                                
                               
                                                                                                            


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def cancel_order_handler(message: Message):
    orders = await db.get_user_orders(message.from_user.id, 1)
    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
            reply_markup=ReplyKeyboards.main_menu()
        )
        return

    order = orders[0]
    order_id = order['id']
    if order['user_id'] != message.from_user.id:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏", reply_markup=ReplyKeyboardRemove())
        return

    await db.update_order(order_id, status='cancelled')
    display_id = order.get('personal_id', order_id)
    await message.answer(
        f"‚ùå –ó–∞—è–≤–∫–∞ #{display_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboards.main_menu()                                  
    )











@router.message(ExchangeStates.waiting_for_note)
async def note_handler(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    data = await state.get_data()
    order_id = data.get("order_id")
    try:
        order = await db.get_order(order_id)
        if not order:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        display_id = order.get('personal_id', order_id)
        await db.update_order(order_id, note=message.text)
        text = (
            f"üìù <b>–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞—è–≤–∫–µ #{display_id}</b>\n\n"
            f"üí¨ –¢–µ–∫—Å—Ç: {message.text}\n\n"
            f"üîß –ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è."
        )
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=ReplyKeyboards.main_menu()
        )
        await notify_operators_error_order(order, message.text)
    except Exception as e:
        logger.error(f"Note handler error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=ReplyKeyboards.main_menu()
        )
    await state.clear()

@router.callback_query(F.data.startswith("op_handle_"))
async def operator_handle_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    try:
        order = await db.get_order(order_id)
        if not order:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        display_id = order.get('personal_id', order_id)
        await db.update_order(order_id, status='processing')
        text = (
            f"üîß <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ #{display_id}</b>\n\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        )
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        await callback.answer("üîß –ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    except Exception as e:
        logger.error(f"Operator handle handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("review_approve_"))
async def review_approve_handler(callback: CallbackQuery):
    review_id = int(callback.data.split("_")[-1])
    try:
        review = await db.get_review(review_id)
        if not review:
            await callback.answer("–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await db.update_review(review_id, status='approved')
        text = (
            f"‚úÖ <b>–û—Ç–∑—ã–≤ #{review_id} –æ–¥–æ–±—Ä–µ–Ω</b>\n\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        if config.REVIEWS_CHANNEL:
            await callback.bot.send_message(
                config.REVIEWS_CHANNEL,
                f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n{review['text']}",
                parse_mode="HTML"
            )
        await callback.answer("‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
    except Exception as e:
        logger.error(f"Review approve handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("review_reject_"))
async def review_reject_handler(callback: CallbackQuery):
    review_id = int(callback.data.split("_")[-1])
    try:
        await db.update_review(review_id, status='rejected')
        text = (
            f"‚ùå <b>–û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: @{callback.from_user.username or callback.from_user.first_name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.message.edit_text(
            text,
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"Review reject handler error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(Command("broadcast"), F.from_user.id.in_(config.ADMIN_USER_ID))
async def broadcast_handler(message: Message, state: FSMContext):
    try:
        await message.answer(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=ReplyKeyboards.back_to_main(),
            parse_mode="HTML"
        )
        await state.set_state(ExchangeStates.waiting_for_contact)
    except Exception as e:
        logger.error(f"Broadcast handler error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")

@router.message(ExchangeStates.waiting_for_contact)
async def broadcast_message_handler(message: Message, state: FSMContext):
    if message.text == "‚ó∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await show_main_menu(message)
        return
    try:
        users = await db.get_all_users()
        broadcast_text = message.text
        success_count = 0
        for user in users:
            try:
                await message.bot.send_message(
                    user['user_id'],
                    broadcast_text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                success_count += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                logger.warning(f"Failed to send broadcast to {user['user_id']}: {e}")
        await message.answer(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Broadcast message handler error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=ReplyKeyboards.main_menu()
        )
    await state.clear()

@router.message(CommandStart(deep_link=True))
async def deep_link_start_handler(message: Message, state: FSMContext):
    try:
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("r-"):
            referral_user_id = int(args[1].split("-")[1])
            await state.update_data(referral_user_id=referral_user_id)
        user = await db.get_user(message.from_user.id)
        if not user:
            captcha_enabled = await db.get_setting("captcha_enabled", config.CAPTCHA_ENABLED)
            if captcha_enabled:
                image_buffer, answer = CaptchaGenerator.generate_image_captcha()
                await db.create_captcha_session(message.from_user.id, answer.upper())
                captcha_photo = BufferedInputFile(
                    image_buffer.read(),
                    filename="captcha.png"
                )
                await message.answer_photo(
                    photo=captcha_photo,
                    caption="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
                    reply_markup=ReplyKeyboards.back_to_main()
                )
                await state.set_state(ExchangeStates.waiting_for_captcha)
                return
            else:
                await db.add_user(
                    message.from_user.id,
                    message.from_user.username,
                    message.from_user.first_name,
                    message.from_user.last_name,
                    referred_by=referral_user_id if 'referral_user_id' in await state.get_data() else None
                )
        await show_main_menu(message)
    except Exception as e:
        logger.error(f"Deep link start handler error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
            reply_markup=ReplyKeyboards.main_menu()
        )

@router.message(Command("stats"), F.from_user.id.in_(config.ADMIN_USER_ID))
async def admin_stats_handler(message: Message):
    try:
        total_users = await db.get_total_users()
        total_orders = await db.get_total_orders()
        completed_orders = await db.get_total_completed_orders()
        total_volume_rub = await db.get_total_volume_rub()
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users:,}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_orders:,}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {completed_orders:,}\n"
            f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume_rub:,.0f} ‚ÇΩ"
        )
        await message.answer(
            text,
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Admin stats handler error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=ReplyKeyboards.main_menu()
        )




@router.message(Command("health"), F.from_user.id.in_(config.ADMIN_USER_ID))
async def health_check_handler(message: Message):
    try:
        response = await payment_api_manager.health_check()
        text = ""
        for api_name, result in response.items():
            if result.get("success"):
                text += f"‚úÖ {api_name}: <b>{result.get('message', 'Working')}</b>\n"
            else:
                text += f"‚ùå {api_name}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                if "status_code" in result:
                    text += f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {result['status_code']}\n"
        await message.answer(
            text,
            reply_markup=ReplyKeyboards.main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Health check handler error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞",
            reply_markup=ReplyKeyboards.main_menu()
        )







async def process_pspware_webhook(webhook_data: dict, bot):
    try:
        order_id = webhook_data.get('personal_id')
        status = webhook_data.get('status')
        received_sum = webhook_data.get('received_sum')

        if not order_id:
            logger.error(f"Webhook –±–µ–∑ personal_id: {webhook_data}")
            return

        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {order_id}")
            return

        if status == 'finished':
            await db.update_order(
                order['id'],
                status='paid_by_client',
                received_sum=received_sum
            )
            updated_order = await db.get_order(order['id'])
            await notify_operators_paid_order(bot, updated_order, received_sum)
            await notify_client_payment_received(bot, updated_order)
        elif status == 'cancelled':
            await db.update_order(order['id'], status='cancelled')
            updated_order = await db.get_order(order['id'])
            await notify_client_order_cancelled(bot, updated_order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook PSPWare: {e}")

async def process_greengo_webhook(webhook_data: dict, bot):
    try:
        order_id = webhook_data.get('personal_id')
        status = webhook_data.get('order_status')
        received_sum = webhook_data.get('amount_payable')

        if not order_id:
            logger.error(f"Greengo webhook without personal_id: {webhook_data}")
            return
        
        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"Order not found: {order_id}")
            return
        
        if status == 'completed':
            await db.update_order(
                order['id'], 
                status='paid_by_client',
                received_sum=received_sum
            )
            updated_order = await db.get_order(order['id'])
            await notify_operators_paid_order(bot, updated_order, received_sum)
            await notify_client_payment_received(bot, updated_order)
            logger.info(f"Greengo –∑–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        elif status == 'canceled':
            await db.update_order(order['id'], status='cancelled')
            updated_order = await db.get_order(order['id'])
            await notify_client_order_cancelled(bot, updated_order)
    except Exception as e:
        logger.error(f"Greengo webhook processing error: {e}")






async def process_nicepay_webhook(webhook_data: dict, bot):
    try:
        order_id = webhook_data.get('merchantOrderId')
        status = webhook_data.get('status')
        received_sum = webhook_data.get('amount')

        if not order_id:
            logger.error(f"NicePay webhook without merchantOrderId: {webhook_data}")
            return

        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"Order not found: {order_id}")
            return

        if status == 'PAID':
            await db.update_order(
                order['id'],
                status='paid_by_client',
                received_sum=received_sum
            )
            updated_order = await db.get_order(order['id'])
            await notify_operators_paid_order(bot, updated_order, received_sum)
            await notify_client_payment_received(bot, updated_order)
            logger.info(f"NicePay –∑–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞")
        elif status == 'CANCELLED':
            await db.update_order(order['id'], status='cancelled')
            updated_order = await db.get_order(order['id'])
            await notify_client_order_cancelled(bot, updated_order)
            logger.info(f"NicePay –∑–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"NicePay webhook processing error: {e}")







async def process_onlypays_webhook(webhook_data: dict, bot):
    try:
        order_id = webhook_data.get('personal_id')
        status = webhook_data.get('status')
        received_sum = webhook_data.get('received_sum')

        if not order_id:
            logger.error(f"OnlyPays webhook –±–µ–∑ personal_id: {webhook_data}")
            return

        order = await db.get_order(int(order_id))
        if not order:
            logger.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {order_id}")
            return

        if status == 'finished':
            await db.update_order(
                order['id'],
                status='paid_by_client',
                received_sum=received_sum
            )
            updated_order = await db.get_order(order['id'])
            await notify_operators_paid_order(bot, updated_order, received_sum)
            await notify_client_payment_received(bot, updated_order)
            logger.info(f"–ó–∞—è–≤–∫–∞ #{updated_order.get('personal_id', order_id)} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞")
        elif status == 'cancelled':
            await db.update_order(order['id'], status='cancelled')
            updated_order = await db.get_order(order['id'])
            await notify_client_order_cancelled(bot, updated_order)
            logger.info(f"–ó–∞—è–≤–∫–∞ #{updated_order.get('personal_id', order_id)} –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OnlyPays webhook: {e}")



